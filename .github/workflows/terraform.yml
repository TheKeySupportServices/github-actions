name: 'Terraform'

on:
  workflow_call:
    inputs:
      GOOGLE_PROJECT_ID:
        required: true
        type: string
    secrets:
      GOOGLE_CREDENTIALS:
        required: true

env:
  TF_LOG: INFO

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    # Set the working directory to main for the config files
    defaults:
      run:
        shell: bash
        working-directory: ./env

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    # Install the preferred version of Terraform CLI

    - uses: google-github-actions/setup-gcloud@v0
      with:
        service_account_key: ${{ secrets.GOOGLE_CREDENTIALS }}
        project_id: ${{ inputs.GOOGLE_PROJECT_ID }}
        export_default_credentials: true

    - name: Whitelist Github runner against cluster
      id: whitelist
      uses: TheKeySupportServices/github-actions/.github/actions/whitelist-ip@main


    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 0.15.3

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      id: init
      run: terraform init --upgrade
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.TERRAFORM_GOOGLE_CREDENTAILS }}
        GITHUB_RUNNER_IP: ${{ steps.whitelist.outputs.GITHUB_RUNNER_IP }}

    - name: Terraform import
      id: import
      run: chmod u+x ./import.sh && ./import.sh
      continue-on-error: true
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.TERRAFORM_GOOGLE_CREDENTAILS }}
        GITHUB_RUNNER_IP: ${{ steps.whitelist.outputs.GITHUB_RUNNER_IP }}

    # Check terraform formatting
    - name: Terraform formatting
      id: fmt
      run: terraform fmt -diff
      continue-on-error: true

    # Validate terraform
    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.TERRAFORM_GOOGLE_CREDENTAILS }}
        GITHUB_RUNNER_IP: ${{ steps.whitelist.outputs.GITHUB_RUNNER_IP }}

    # Run a terraform plan for pull requests only
    - name: Terraform Plan
      id: plan
      if: github.event_name == 'pull_request'
      run: terraform plan -var="GITHUB_RUNNER_IP=${{ steps.whitelist.outputs.GITHUB_RUNNER_IP }}" -no-color
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.TERRAFORM_GOOGLE_CREDENTAILS }}
        GITHUB_RUNNER_IP: ${{ steps.whitelist.outputs.GITHUB_RUNNER_IP }}

    # Add a comment to pull requests with plan results
    - name: add-plan-comment
      id: comment
      uses: actions/github-script@v3
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outputs.stdout }}\`
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`${process.env.PLAN}\`\`\`

          </details>

          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

          github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

      # On push to main, build or change infrastructure according to Terraform configuration files
    - name: Terraform Apply
      if: github.ref == 'refs/heads/master' && github.event_name == 'push'
      run: terraform apply -var="GITHUB_RUNNER_IP=${{ steps.whitelist.outputs.GITHUB_RUNNER_IP }}" -auto-approve
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.TERRAFORM_GOOGLE_CREDENTAILS }}
        GITHUB_RUNNER_IP: ${{ steps.whitelist.outputs.GITHUB_RUNNER_IP }}

    - name: Post Remove whitelisted Github runner IP
      if: always()
      uses: TheKeySupportServices/github-actions/.github/actions/whitelist-ip@main
      with:
        REMOVE_IP: true