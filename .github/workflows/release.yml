name: Callable Feature workflow

on:
  workflow_call:
    inputs:
      DJANGO_SETTINGS_MODULE:
        required: true
        type: string
      LINTING_ENABLED:
        required: false
        type: string
        default: true
      TESTS_ENABLED:
        required: false
        type: string
        default: true
      BUILD_ARGS:
        required: false
        type: string
      IMAGE_NAME_OVERRIDE:
        required: false
        type: string
    secrets:
      SLACK_WEBHOOK_URL:
        required: true
      GCR_JSON_KEY:
        required: true
      BINARY_AUTH_JSON_KEY:
        required: true
      READ_ONLY_SSH_KEY:
        required: false
      BINARY_AUTH_JSON_KEY_PROD:
        required: false

jobs:
  Docker:
    name: Build Docker image
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

      - name: Setup version env vars
        uses: TheKeySupportServices/github-actions/.github/actions/git-changes@main

      - name: Setup variables
        id: vars
        uses: TheKeySupportServices/github-actions/.github/actions/setup-variables@main
        with:
          image_name_override: ${{ inputs.image_name_override }}
          binary_auth_json_key_qa: ${{ secrets.BINARY_AUTH_JSON_KEY }}
          binary_auth_json_key_prod: ${{ secrets.BINARY_AUTH_JSON_KEY_PROD }}

      - uses: google-github-actions/setup-gcloud@v0
        with:
          service_account_key: ${{ secrets.GCR_JSON_KEY }}
          project_id: ${{ steps.vars.outputs.google_project_id }}
          export_default_credentials: true

      - name: Configure docker
        run: gcloud auth configure-docker -q

      - name: Testing logic
        run: echo ${{steps.vars.outputs.env }} ${{ github.head_ref }} ${{ steps.vars.outputs.branch }}

      - name: Create tags
        id: tags
        with:
          branch: ${{ steps.vars.outputs.branch }}
          commit: ${{ steps.vars.outputs.commit }}
          datetime: ${{ steps.vars.outputs.datetime }}
        uses: TheKeySupportServices/github-actions/.github/actions/create-tags@main

      - name: Slack notification
        uses: slackapi/slack-github-action@v1.18.0
        with:
          # This data can be any valid JSON from a previous step in the GitHub Action
          payload: |
            {
              "username": "Github Workflows/Actions",
              "color": "warning",
              "text": "Started `${{ github.event.repository.name }}/${{steps.vars.outputs.branch}}#${{ github.run_number }}` <https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}|Open in browser>\n\n_The changes:_\n${{ env.LAST_CHANGES }}"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: file it
        run: cat $${{ secrets.READ_ONLY_SSH_KEY }} | test

      - name: Build
        uses: docker/build-push-action@v2
        with:
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: ${{ steps.vars.outputs.registry_url }}/${{ steps.vars.outputs.google_project_id }}/${{ steps.vars.outputs.image_name }}:${{ steps.tags.outputs.tag1 }},${{ steps.vars.outputs.registry_url }}/${{ steps.vars.outputs.google_project_id }}/${{ steps.vars.outputs.image_name }}:${{ steps.tags.outputs.tag2 }},${{ steps.vars.outputs.registry_url }}/${{ steps.vars.outputs.google_project_id }}/${{ steps.vars.outputs.image_name }}:${{ steps.tags.outputs.tag3 }}
          build-args: |
            BUILD_ENV="ci"
            NODE_KEY_ENV="${{ steps.vars.outputs.env }}"
            SSH_KEY=${{ secrets.READ_ONLY_SSH_KEY }}
            environment="${{ steps.vars.outputs.env }}"
          ssh: |
            key=test

      - name: Test
        with:
          linting_enabled: ${{ inputs.LINTING_ENABLED }}
          tests_enabled: ${{ inputs.TESTS_ENABLED }}
          registry_url: ${{ steps.vars.outputs.registry_url }}
          google_project_id: ${{ steps.vars.outputs.google_project_id }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          django_settings_module: ${{ inputs.DJANGO_SETTINGS_MODULE }}
          tag1: ${{ steps.tags.outputs.tag1 }}
          tag2: ${{ steps.tags.outputs.tag2 }}
          tag3: ${{ steps.tags.outputs.tag3 }}
        uses: TheKeySupportServices/github-actions/.github/actions/build-lint-test@main

      - name: Slack notification
        uses: slackapi/slack-github-action@v1.18.0
        with:
          # This data can be any valid JSON from a previous step in the GitHub Action
          payload: |
            {
              "username": "Github Workflows/Actions",
              "color": "warning",
              "text": "Build successful/Tests PASSED: `${{ github.event.repository.name }}/${{steps.vars.outputs.branch}}#${{ github.run_number }}` <https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}|Open in browser>"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - if: steps.vars.outputs.env == 'prod'
        name: Tag snapshot
        uses: tvdias/github-tagger@v0.0.1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          tag: release-${{steps.vars.outputs.datetime}}

      - name: Build
        uses: docker/build-push-action@v2
        with:
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: ${{ steps.vars.outputs.registry_url }}/${{ steps.vars.outputs.google_project_id }}/${{ steps.vars.outputs.image_name }}:${{ steps.tags.outputs.tag1 }},${{ steps.vars.outputs.registry_url }}/${{ steps.vars.outputs.google_project_id }}/${{ steps.vars.outputs.image_name }}:${{ steps.tags.outputs.tag2 }},${{ steps.vars.outputs.registry_url }}/${{ steps.vars.outputs.google_project_id }}/${{ steps.vars.outputs.image_name }}:${{ steps.tags.outputs.tag3 }}
          build-args: |
            BUILD_ENV="ci"
            NODE_KEY_ENV="${{ steps.vars.outputs.env }}"
            SSH_KEY="${{ secrets.READ_ONLY_SSH_KEY }}"
            environment="${{ steps.vars.outputs.env }}"

      - name: Slack notification
        uses: slackapi/slack-github-action@v1.18.0
        with:
          # This data can be any valid JSON from a previous step in the GitHub Action
          payload: |
            {
              "username": "Github Workflows/Actions",
              "color": "good",
              "text": "Image pushed successfully (${{steps.vars.outputs.env}}): `${{ github.event.repository.name }}/${{steps.vars.outputs.branch}}#${{ github.run_number }}` <https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}|Open in browser>"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Unset current project
        run: gcloud config unset project

      - if: steps.vars.outputs.env == 'qa'
        uses: google-github-actions/setup-gcloud@v0
        with:
          service_account_key: ${{ secrets.BINARY_AUTH_JSON_KEY }}
          project_id: "thekey-dev"
          export_default_credentials: true

      - if: steps.vars.outputs.env == 'prod'
        uses: google-github-actions/setup-gcloud@v0
        with:
          service_account_key: ${{ secrets.BINARY_AUTH_JSON_KEY_PROD }}
          project_id: "thekey-prod"
          export_default_credentials: true

      - name: Configure docker
        run: gcloud auth configure-docker -q

      - name: Install gcloud beta
        run: gcloud components install beta

      - name: Image attestation
        with:
          ATTESTOR: ${{ steps.vars.outputs.attestor }}
          IMAGE_NAME: ${{ steps.vars.outputs.registry_url }}/${{ steps.vars.outputs.google_project_id }}/${{ steps.vars.outputs.image_name }}
          IMAGE_TAG: ${{steps.tags.outputs.tag1}}
          GOOGLE_PROJECT_ID: ${{ steps.vars.outputs.google_project_id }}
          KMS_KEY: ${{ steps.vars.outputs.kms_key }}
          KMS_KEY_VERSION: "1"
          KMS_KEYRING: ${{ steps.vars.outputs.kms_keyring }}
          KMS_LOCATION: "europe-west2"
        uses: TheKeySupportServices/github-actions/.github/actions/attestation@main




      # Maybe keep linting to PR only to improve, can we do the same for tests or is it too risky.
